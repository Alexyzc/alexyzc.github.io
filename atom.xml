<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风轻云淡</title>
  <subtitle>Goals determine what you are going to be</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/Alexyzc/"/>
  <updated>2017-03-08T15:15:40.350Z</updated>
  <id>https://github.com/Alexyzc/</id>
  
  <author>
    <name>风轻云淡</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>案件生成</title>
    <link href="https://github.com/Alexyzc/2017/03/08/%E7%94%9F%E6%88%90%E6%A1%88%E4%BB%B6/"/>
    <id>https://github.com/Alexyzc/2017/03/08/生成案件/</id>
    <published>2017-03-08T14:52:10.057Z</published>
    <updated>2017-03-08T15:15:40.350Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、开篇"><a href="#一、开篇" class="headerlink" title="一、开篇"></a>一、开篇</h2><ul>
<li><p>需求</p>
<ul>
<li>随机生成案件</li>
<li>内容包括：身份证、手机号、微信号、QQ号、家庭住址、电子邮箱、性别等</li>
<li>生成Json格式的案件</li>
<li>可以生成jar包，随机生成N条案件，当前路径：java -jar jar包名称 N<a id="more"></a>  </li>
<li><p>示例核心代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"> package com.cn.jetty.im;</div><div class="line"></div><div class="line"> import java.util.ArrayList;</div><div class="line"> import java.util.Map;</div><div class="line"> import com.cn.jetty.bean.in.CaseApplyListBean;</div><div class="line"> import com.cn.jetty.bean.in.CaseBean;</div><div class="line"> import com.cn.jetty.util.DateUtil;</div><div class="line"> import com.cn.jetty.util.FileUtil;</div><div class="line"> import com.cn.jetty.util.GeneratorData;</div><div class="line"> import com.cn.jetty.util.JsonUtil;</div><div class="line"> import com.cn.jetty.util.RandomValue;</div><div class="line"> import com.cn.jetty.util.dao.GeneratorDao;</div><div class="line"></div><div class="line"> public class OutCaseList &#123;</div><div class="line">public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">	FileUtil f = new FileUtil();</div><div class="line">	GeneratorDao gd = new GeneratorDao();</div><div class="line">	int out = Integer.parseInt(args[0]); </div><div class="line">	ArrayList&lt;CaseBean&gt; arrcase = new ArrayList&lt;CaseBean&gt;();</div><div class="line">	for (int i = 0; i &lt; out  ;i++) &#123;</div><div class="line">		Map amt = GeneratorData.generatoramt();</div><div class="line">		CaseBean casebean = new CaseBean();</div><div class="line">		casebean.setLoanNo(GeneratorData.generatorCaseNo());</div><div class="line">		casebean.setName(RandomValue.getChineseName());</div><div class="line">		casebean.setId(GeneratorData.generatorId());</div><div class="line">		casebean.setIdAddr(RandomValue.getRoad());</div><div class="line">		if (RandomValue.getNum(0, 20) &gt; 10) &#123;</div><div class="line">			casebean.setGender(&quot;男&quot;);</div><div class="line">		&#125;else if(RandomValue.getNum(0, 20) &lt; 10) &#123;</div><div class="line">			casebean.setGender(&quot;女&quot;);</div><div class="line">		&#125;else &#123;</div><div class="line">			casebean.setGender(&quot;其它&quot;);</div><div class="line">		&#125;</div><div class="line">		casebean.setCaseAmt((String) amt.get(&quot;caseAmt&quot;));</div><div class="line">		casebean.setDebtAmt(amt.get(&quot;debtAmt&quot;).toString());</div><div class="line">		casebean.setOverdueAmt(amt.get(&quot;overdueAmt&quot;).toString());</div><div class="line">		casebean.setPenaltyInterest(amt.get(&quot;penaltyInterest&quot;).toString());</div><div class="line">		casebean.setApplyDate(amt.get(&quot;applyDate&quot;).toString());</div><div class="line">		casebean.setOverdueDate(amt.get(&quot;overdueDate&quot;).toString());</div><div class="line">		casebean.setLendingInstitution(&quot;xxxx&quot;);</div><div class="line">		casebean.setQqList(GeneratorData.generatorQqList());</div><div class="line">		casebean.setWechatList(GeneratorData.generatorQqList());</div><div class="line">		casebean.setPhoneList(GeneratorData.generatorPhoneBean());</div><div class="line">		casebean.setAddrList(GeneratorData.generatorAddressBean());</div><div class="line">		casebean.setSpecialCase(0);</div><div class="line">		casebean.setProductCode(&quot;APP2&quot;);</div><div class="line">		casebean.setAheadSettleAmt(amt.get(&quot;aheadSettleAmt&quot;).toString());</div><div class="line">		casebean.setEmail(RandomValue.getEmail(6, 9));</div><div class="line"></div><div class="line">		// System.out.println(JsonUtil.toJsonString(casebean));</div><div class="line">		// 插入t_case表中</div><div class="line">		gd.add(casebean);</div><div class="line">		arrcase.add(casebean);</div><div class="line">	&#125;		</div><div class="line">	CaseApplyListBean caselist = new CaseApplyListBean();</div><div class="line">	caselist.setCaseApplyBaseEntitys(arrcase);</div><div class="line">	System.out.println(JsonUtil.toJsonString(caselist));</div><div class="line">	String json = JsonUtil.toJsonString(caselist);</div><div class="line">	String filename =  &quot;MMD&quot; + DateUtil.currTime() + &quot;.case&quot;;</div><div class="line">	System.out.println(filename);</div><div class="line">	f.WriteFile(json,&quot;MMD_CASE&quot;, &quot;/&quot;+filename,&quot;UTF-8&quot;);	</div><div class="line">&#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>结果展示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;caseApplyBaseEntitys&quot;: [</div><div class="line">    &#123;</div><div class="line">      &quot;addrList&quot;: [</div><div class="line">        &#123;</div><div class="line">          &quot;addrType&quot;: &quot;0&quot;,</div><div class="line">          &quot;address&quot;: &quot;奉化街142号-6-6&quot;,</div><div class="line">          &quot;relation&quot;: &quot;4&quot;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          &quot;addrType&quot;: &quot;0&quot;,</div><div class="line">          &quot;address&quot;: &quot;巢湖街113号-1-10&quot;,</div><div class="line">          &quot;relation&quot;: &quot;4&quot;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          &quot;addrType&quot;: &quot;0&quot;,</div><div class="line">          &quot;address&quot;: &quot;礼阳路40号-2-9&quot;,</div><div class="line">          &quot;relation&quot;: &quot;1&quot;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          &quot;addrType&quot;: &quot;1&quot;,</div><div class="line">          &quot;address&quot;: &quot;峄县路64号-13-7&quot;,</div><div class="line">          &quot;relation&quot;: &quot;2&quot;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          &quot;addrType&quot;: &quot;1&quot;,</div><div class="line">          &quot;address&quot;: &quot;云霄大厦28号-20-4&quot;,</div><div class="line">          &quot;relation&quot;: &quot;2&quot;</div><div class="line">        &#125;</div><div class="line">      ],</div><div class="line">      &quot;aheadSettleAmt&quot;: &quot;2000.00&quot;,</div><div class="line">      &quot;applyDate&quot;: &quot;2016-06-15&quot;,</div><div class="line">      &quot;caseAmt&quot;: &quot;20000.00&quot;,</div><div class="line">      &quot;debtAmt&quot;: &quot;18000.00&quot;,</div><div class="line">      &quot;email&quot;: &quot;3aw6i9t4@sohu.com&quot;,</div><div class="line">      &quot;gender&quot;: &quot;男&quot;,</div><div class="line">      &quot;id&quot;: &quot;230705198906216705&quot;,</div><div class="line">      &quot;idAddr&quot;: &quot;台西五路139号-14-1&quot;,</div><div class="line">      &quot;lendingInstitution&quot;: &quot;MMJF&quot;,</div><div class="line">      &quot;loanNo&quot;: &quot;CASE_1488985377852&quot;,</div><div class="line">      &quot;name&quot;: &quot;桑伊媛&quot;,</div><div class="line">      &quot;overdueAmt&quot;: &quot;2000.00&quot;,</div><div class="line">      &quot;overdueDate&quot;: &quot;2017-03-10&quot;,</div><div class="line">      &quot;penaltyInterest&quot;: &quot;0.00&quot;,</div><div class="line">      &quot;phoneList&quot;: [</div><div class="line">        &#123;</div><div class="line">          &quot;name&quot;: &quot;宫珠&quot;,</div><div class="line">          &quot;phoneNo&quot;: &quot;13406483407&quot;,</div><div class="line">          &quot;relation&quot;: &quot;0&quot;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          &quot;name&quot;: &quot;颜祥言&quot;,</div><div class="line">          &quot;phoneNo&quot;: &quot;15303150205&quot;,</div><div class="line">          &quot;relation&quot;: &quot;0&quot;</div><div class="line">        &#125;</div><div class="line">      ],</div><div class="line">      &quot;productCode&quot;: &quot;APP2&quot;,</div><div class="line">      &quot;qqList&quot;: [</div><div class="line">      </div><div class="line">      ],</div><div class="line">      &quot;specialCase&quot;: 0,</div><div class="line">      &quot;wechatList&quot;: [</div><div class="line">        &quot;985377881491&quot;,</div><div class="line">        &quot;985377881873&quot;</div><div class="line">      ]</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;addrList&quot;: [</div><div class="line">        &#123;</div><div class="line">          &quot;addrType&quot;: &quot;1&quot;,</div><div class="line">          &quot;address&quot;: &quot;临邑路55号-12-7&quot;,</div><div class="line">          &quot;relation&quot;: &quot;2&quot;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          &quot;addrType&quot;: &quot;0&quot;,</div><div class="line">          &quot;address&quot;: &quot;夏津大厦54号-20-9&quot;,</div><div class="line">          &quot;relation&quot;: &quot;0&quot;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          &quot;addrType&quot;: &quot;0&quot;,</div><div class="line">          &quot;address&quot;: &quot;济宁支街43号-2-9&quot;,</div><div class="line">          &quot;relation&quot;: &quot;3&quot;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          &quot;addrType&quot;: &quot;0&quot;,</div><div class="line">          &quot;address&quot;: &quot;莆田街35号-4-4&quot;,</div><div class="line">          &quot;relation&quot;: &quot;4&quot;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          &quot;addrType&quot;: &quot;1&quot;,</div><div class="line">          &quot;address&quot;: &quot;泰州街117号-5-9&quot;,</div><div class="line">          &quot;relation&quot;: &quot;3&quot;</div><div class="line">        &#125;</div><div class="line">      ],</div><div class="line">      &quot;aheadSettleAmt&quot;: &quot;2000.00&quot;,</div><div class="line">      &quot;applyDate&quot;: &quot;2016-06-15&quot;,</div><div class="line">      &quot;caseAmt&quot;: &quot;20000.00&quot;,</div><div class="line">      &quot;debtAmt&quot;: &quot;18000.00&quot;,</div><div class="line">      &quot;email&quot;: &quot;gua7k50za@163.net&quot;,</div><div class="line">      &quot;gender&quot;: &quot;男&quot;,</div><div class="line">      &quot;id&quot;: &quot;610204198102283790&quot;,</div><div class="line">      &quot;idAddr&quot;: &quot;扬州街21号-5-3&quot;,</div><div class="line">      &quot;lendingInstitution&quot;: &quot;MMJF&quot;,</div><div class="line">      &quot;loanNo&quot;: &quot;CASE_1488985378565&quot;,</div><div class="line">      &quot;name&quot;: &quot;訾舒&quot;,</div><div class="line">      &quot;overdueAmt&quot;: &quot;2000.00&quot;,</div><div class="line">      &quot;overdueDate&quot;: &quot;2017-03-10&quot;,</div><div class="line">      &quot;penaltyInterest&quot;: &quot;0.00&quot;,</div><div class="line">      &quot;phoneList&quot;: [</div><div class="line">        &#123;</div><div class="line">          &quot;name&quot;: &quot;孙美桂&quot;,</div><div class="line">          &quot;phoneNo&quot;: &quot;15105237705&quot;,</div><div class="line">          &quot;relation&quot;: &quot;0&quot;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          &quot;name&quot;: &quot;寿龙胜&quot;,</div><div class="line">          &quot;phoneNo&quot;: &quot;15201428987&quot;,</div><div class="line">          &quot;relation&quot;: &quot;4&quot;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          &quot;name&quot;: &quot;姜春&quot;,</div><div class="line">          &quot;phoneNo&quot;: &quot;13506340655&quot;,</div><div class="line">          &quot;relation&quot;: &quot;2&quot;</div><div class="line">        &#125;</div><div class="line">      ],</div><div class="line">      &quot;productCode&quot;: &quot;APP2&quot;,</div><div class="line">      &quot;qqList&quot;: [</div><div class="line">        &quot;985378567136&quot;,</div><div class="line">        &quot;98537856711&quot;,</div><div class="line">        &quot;985378567501&quot;,</div><div class="line">        &quot;985378567515&quot;</div><div class="line">      ],</div><div class="line">      &quot;specialCase&quot;: 0,</div><div class="line">      &quot;wechatList&quot;: [</div><div class="line">        &quot;985378567497&quot;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、开篇&quot;&gt;&lt;a href=&quot;#一、开篇&quot; class=&quot;headerlink&quot; title=&quot;一、开篇&quot;&gt;&lt;/a&gt;一、开篇&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;需求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;随机生成案件&lt;/li&gt;
&lt;li&gt;内容包括：身份证、手机号、微信号、QQ号、家庭住址、电子邮箱、性别等&lt;/li&gt;
&lt;li&gt;生成Json格式的案件&lt;/li&gt;
&lt;li&gt;可以生成jar包，随机生成N条案件，当前路径：java -jar jar包名称 N
    
    </summary>
    
      <category term="Java" scheme="https://github.com/Alexyzc/categories/Java/"/>
    
    
      <category term="Jetty" scheme="https://github.com/Alexyzc/tags/Jetty/"/>
    
      <category term="Servlet" scheme="https://github.com/Alexyzc/tags/Servlet/"/>
    
      <category term="OutCaseList" scheme="https://github.com/Alexyzc/tags/OutCaseList/"/>
    
  </entry>
  
  <entry>
    <title>MockServer</title>
    <link href="https://github.com/Alexyzc/2017/03/08/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    <id>https://github.com/Alexyzc/2017/03/08/测试开发/</id>
    <published>2017-03-07T16:57:14.666Z</published>
    <updated>2017-03-07T17:11:04.781Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、开篇"><a href="#一、开篇" class="headerlink" title="一、开篇"></a>一、开篇</h2><ul>
<li>概念</li>
<li>如何配置</li>
<li>${}</li>
</ul>
<p><a href="http://www.eclipse.org/jetty/documentation/current/index.html" target="_blank" rel="external">jetty</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、开篇&quot;&gt;&lt;a href=&quot;#一、开篇&quot; class=&quot;headerlink&quot; title=&quot;一、开篇&quot;&gt;&lt;/a&gt;一、开篇&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;概念&lt;/li&gt;
&lt;li&gt;如何配置&lt;/li&gt;
&lt;li&gt;${}&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;htt
    
    </summary>
    
      <category term="test_development" scheme="https://github.com/Alexyzc/categories/test-development/"/>
    
    
      <category term="Jetty" scheme="https://github.com/Alexyzc/tags/Jetty/"/>
    
      <category term="Servlet" scheme="https://github.com/Alexyzc/tags/Servlet/"/>
    
      <category term="Connectors" scheme="https://github.com/Alexyzc/tags/Connectors/"/>
    
      <category term="Handlers" scheme="https://github.com/Alexyzc/tags/Handlers/"/>
    
  </entry>
  
  <entry>
    <title>Python常用模块处理</title>
    <link href="https://github.com/Alexyzc/2017/03/07/Python/"/>
    <id>https://github.com/Alexyzc/2017/03/07/Python/</id>
    <published>2017-03-07T14:26:37.346Z</published>
    <updated>2017-03-07T16:54:50.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、开篇"><a href="#一、开篇" class="headerlink" title="一、开篇"></a>一、开篇</h2><ul>
<li>邮件模块</li>
<li>Excel处理模块</li>
<li>日志模块</li>
<li>PDF模块</li>
<li>MD5处理</li>
<li>mongodb索引和聚合</li>
</ul>
<a id="more"></a>
<ul>
<li><p>邮件模块：<br>  此处邮件模块处理是程序运行中希望将程序运行的日志信息或者错误捕获信息发送给指定的收件人，通过邮件可以了解程序运行的状态或者出错信息。</p>
<ul>
<li>发送邮件需求的模块<ul>
<li>smtplib</li>
<li>email</li>
</ul>
</li>
<li>发送邮件需求的步骤<ul>
<li>email 构造邮件</li>
<li>smtplib 协议发送邮件</li>
</ul>
</li>
<li>邮件发送主要涉及SMTP协议, 接收主要涉及POP 协议、IMAP协议</li>
<li><p>邮件基本包含哪些基础的东西,以QQ邮箱为例:<br><img src="http://omfuwekil.bkt.clouddn.com/qq_email.jpg" alt="qq_email"></p>
<ul>
<li>收件人</li>
<li>发件人</li>
<li>邮件主题</li>
<li>邮件正文</li>
<li>邮件附件</li>
<li><p>实例代码一：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">import email</div><div class="line">from email.mime.text import MIMEText</div><div class="line">import smtplib</div><div class="line">from email.header import Header</div><div class="line"></div><div class="line"># 构造邮件信息</div><div class="line">msg = MIMEText(&apos;这是python自动脚本邮件信息。&apos;, &apos;plain&apos;, &apos;utf-8&apos;) # 邮件正文</div><div class="line"># QQ发给公司： 多了这步 server.starttls()</div><div class="line">from_addr = &quot;xxx@foxmail.com&quot; # 发件人</div><div class="line">password = &quot;****&quot; # 发件人邮箱密码</div><div class="line">smtp_server = &quot;smtp.qq.com&quot;  # SMTP 服务器地址</div><div class="line">port = 587  # SMTP 服务器端口</div><div class="line">to_addr = &quot;paul.xie@chinascope.com&quot;  # 收件人</div><div class="line"></div><div class="line">msg[&quot;From&quot;] = Header(&quot;Python_Tester&lt;&#123;&#125;&gt;&quot;.format(from_addr))  # 显示的邮件发件人</div><div class="line">msg[&quot;To&quot;] = Header(&quot;admin&lt;&#123;&#125;&gt;&quot;.format(to_addr))</div><div class="line">msg[&quot;Subject&quot;] = Header(&quot;from Python_Tester Test&quot;, &quot;utf-8&quot;)  # 邮件主题</div><div class="line"></div><div class="line"># 发送邮件 </div><div class="line">server = smtplib.SMTP(smtp_server, port)</div><div class="line">server.starttls()</div><div class="line">server.set_debuglevel(1)</div><div class="line">server.login(from_addr, password=password)</div><div class="line">server.sendmail(from_addr, [to_addr], msg=msg.as_string())</div><div class="line">server.quit()</div></pre></td></tr></table></figure>
</li>
<li><p>实例代码二：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"> # 使用yagmail 第三方模块</div><div class="line"> import yagmail</div><div class="line"> # 设置发送人信息及SMTP服务器和端口</div><div class="line"> yag = yagmail.SMTP(</div><div class="line">user=&quot;xxx@foxmail.com&quot;,</div><div class="line">password=&quot;****&quot;,</div><div class="line">host=&quot;smtp.qq.com&quot;,</div><div class="line">port=&quot;587&quot;</div><div class="line"> )</div><div class="line"> </div><div class="line"> contents = u&quot;系统提醒,您有错误信息发生。&quot;</div><div class="line"> yag.send(to=[&quot;xxx@outlook.com&quot;,&quot;xxx@qq.com&quot;], subject=&quot;yagmail&quot;, contents=contents)</div><div class="line"> </div><div class="line"> # 参数说明</div><div class="line"> &apos;&apos;&apos;</div><div class="line"> to : 收件人，可以接受一个list 发送至多人</div><div class="line"> subject: 邮件主题</div><div class="line"> contents: 邮件正文，默认是文本信息，其实还可以接收各种常见的文件比如，*.jpg, *.docx, *.pdf ，*.html 等信息，只需要设置完整路径，或者同一目录下文件名称即可。</div><div class="line"> &apos;&apos;&apos;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>日志模块：<br>详见<a href="https://pythonguidecn.readthedocs.io/zh/latest/writing/logging.html" target="_blank" rel="external">Python指南Logging</a><br>日志更友好的了解程序运行中的信息或者错误信息，方便了解程序运行状态以及报错信息<br>如何使用logging模块？需要了解的内容：</p>
<ul>
<li>日志的级别</li>
<li>关于日志的基本概念：记录器，处理器，过滤器，格式化器</li>
<li>编写常规的日志需要的步骤</li>
<li><p>日志的级别：日志分等级，设置好等级，比设置好的级别大的才能在显示</p>
<ul>
<li>DEBUG</li>
<li>INFO</li>
<li>WARN</li>
<li>ERROR</li>
<li>CRITICAL<br>默认日志名为root, 默认日志级别为WARN</li>
</ul>
</li>
<li><p>在程序中配置日志存在三种方法：</p>
<ul>
<li>使用INI文件配置</li>
<li>使用字典或者JSON配置</li>
<li>在程序源代码中配置</li>
<li><p>实例代码：</p>
<pre><code>&apos;&apos;&apos;
import logging

logger = logging.getLogger(&quot;logger_name&quot;) # 记录器
handler = logging.StreamHandler()  # 日志显示在控制台，还可以设置将日志信息输出为文本形式FileHandler()
formatter = logging.Formatter(
      &apos;%(asctime)s %(name)-12s %(levelname)-8s %(message)s&apos;)

handler.setFormatter(formatter) # 设置日志显示方式
logger.addHandler(handler) # 添加处理器
logger.setLevel(logging.DEBUG) # 设置日志级别
logger.debug(&apos;often makes a very good meal of %s&apos;, &apos;visiting tourists&apos;) # 日志在程序中的使用
&apos;&apos;&apos;
</code></pre></li>
<li><p>总结：</p>
<pre><code>&apos;&apos;&apos;
# 基本步骤，如下：

# 创建logger
logger = logging.getLogger(&quot;Your_logger_name&quot;)
logger.setLevel(logging.DEBUG)

# 创建handler
logger_one = logging.StreamHandler()
logger_one.setLevel(logging.INFO)

# 创建Formatter
formatter = logging.Formatter(&apos;%(asctime)s - %(name)s - %(levelname)s - %(message)s&apos;)

# 配置Logger
logger_one.setFormatter(formatter)
logger.addHandler(logger_one)

# 使用logger
logger.info(&apos;info message&apos;)
&apos;&apos;&apos;
</code></pre></li>
</ul>
</li>
</ul>
</li>
<li><p>Excel模块:<br>Excel基本概念：<br>一个workbook 可以包含多个sheet, 一个sheet中包含更多的行列组成的表格</p>
<ul>
<li>Workbook : 工作簿</li>
<li>sheet: 工作表</li>
<li>cell: 单元格<br><img src="http://omfuwekil.bkt.clouddn.com/t_excel.jpg" alt="Excel"><br>如何通过程序来实现？步骤如下：</li>
<li>实例化workbook</li>
<li>添加sheet</li>
<li>往单元格里面写入内容</li>
<li>保存文件</li>
<li><p>实例代码一：</p>
<pre><code>&apos;&apos;&apos;
# xlwt的基本使用就是往单元格中进行内容的写入
import xlwt # 导入xlwt模块

wb = xlwt.Workbook()
ws.write(0, 0, 1234.56)  # 第一行第一列写入123.56
ws.write(2, 0, 1)   # 第三行第一列写入 1
ws.write(2, 1, 1)   # 第三行第二列写入 1
ws.write(2, 2, xlwt.Formula(&quot;A3+B3&quot;))  # 第三行第三列是前面值之和

wb.save(&apos;example.xls&apos;)  # 保存为文件名example.xls
&apos;&apos;&apos;
</code></pre></li>
<li><p>实例代码二：</p>
<pre><code>&apos;&apos;&apos;
# 将mongodb数据库中的数据导入入excel中
  &quot;&quot;&quot;
  1.根据数据获取行和列数
  2.先写入header信息
  3.再两重循环写入内容值
  &quot;&quot;&quot;

from pymongo import MongoClient
from xlwt import Workbook
from xlwt import easyxf  # 可以定义字体，颜色等样式

class MongoToXls(object):
  def __init__(self, collection, name):
      self.work_book = collection
      self.sheet_name = name
      self.wb = Workbook()
      self.ws = [self.wb.add_sheet(one) for one in self.sheet_name]
      self.style = easyxf(&quot;align: vert centre, horiz center&quot;)
      pass
  def info(self, number):
      self.contents = list(self.work_book[number].find())
      self.headers = [key for key in self.contents[0].keys()]
      rows = len(self.contents)
      columns = len(self.headers)
      return rows, columns
  def write_header(self, number):
      ws = self.ws[number]
      _, columns = self.info(number)
      for i in range(0, columns):
          ws.write(0, i, self.headers[i], style=self.style)
  def write_content(self, number):
      ws = self.ws[number]
      rows, columns = self.info(number)
      if rows &gt;= 65536:
          rows = 65535
      for j in range(1, rows + 1):
          for k in range(0, columns):
              ws.write(j, k, str(self.contents[j - 1][self.headers[k]]), style=self.style)
  def save(self):
      name = &quot;_&quot;.join(self.sheet_name) +&quot;2&quot;+ str(&quot;.xls&quot;)
      self.wb.save(str(name))

collection1 = MongoClient()[&quot;db5&quot;][&quot;base&quot;]
collection2 = MongoClient()[&quot;db5&quot;][&quot;items&quot;]
collection3 = MongoClient()[&quot;db5&quot;][&quot;values&quot;]
collection = [collection1, collection2, collection3]
name = [&quot;base&quot;, &quot;items&quot;, &quot;values&quot;]

A = MongoToXls(collection=collection, name=name)
for number in range(len(collection)):
  print A.info(number)
  A.write_header(number)
  A.write_content(number)
A.save()
&apos;&apos;&apos;
</code></pre></li>
</ul>
</li>
<li><p>PDF模块:</p>
<ul>
<li>pdfminer模块可以将pdf信息转换为字符串信息</li>
<li><p>实例代码：</p>
<pre><code>&apos;&apos;&apos;
# 读取本地pdf转化为字符串
from cStringIO import StringIO
from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter
from pdfminer.converter import TextConverter
from pdfminer.layout import LAParams
from pdfminer.pdfpage import PDFPage

def convert_pdf_2_text(path):

  rsrcmgr = PDFResourceManager()
  retstr = StringIO()

  device = TextConverter(rsrcmgr, retstr, codec=&apos;utf-8&apos;, laparams=LAParams())
  interpreter = PDFPageInterpreter(rsrcmgr, device)

  with open(path, &apos;rb&apos;) as fp:
      for page in PDFPage.get_pages(fp, set()):
          interpreter.process_page(page)
      text = retstr.getvalue()

      device.close()

  device.close()
  retstr.close()

  return text

# 将数据读入内存在进行处理
url_data = requests.get(&quot;xxx.pdf&quot;).content
data = StringIO(url_data)
parser = PDFParser(data)
document = PDFDocument(parser)
rercmgr = PDFResourceManager(document)
retstr = StringIO()
laparams = LAParams()
codec = &apos;utf-8&apos;
device = TextConverter(rercmgr, retstr, codec=codec, laparams=laparams)
interpreter = PDFPageInterpreter(rercmgr, device)
  for page in PDFPage.create_pages(document):
  interpreter.process_page(page)

text = retstr.getvalue()# 返回的text 就能普通字符串的处理提取信息了。

&apos;&apos;&apos;
</code></pre></li>
</ul>
</li>
<li><p>MD5处理：</p>
<ul>
<li><p>实例代码：</p>
<pre><code>&apos;&apos;&apos;
from hashlib

md = hashlib.md5()
md.update(&quot;字符串&quot;)
md5.hexdigest()

// 现在的问题是想要根据一个字典数据形成一个hash, 以使得可以判断字典数据没有完全一致的。

str = (&quot;_&quot;.join(&quot;%s:%s&quot; % (key, value) for key, value in dict_item.items() if key not in (&quot;ct&quot;)) + &quot;_&quot; + str(number)).encode(&quot;utf-8&quot;)

md5.update(str)
md5.hexdigest()
&apos;&apos;&apos;
</code></pre></li>
</ul>
</li>
<li><p>mongodb索引和聚合：</p>
<ul>
<li>目的：能够很好的对数据进行判重处理</li>
<li><p>思路</p>
<ul>
<li>根据入库的数据进行生成md5值，将md5值设置为唯一索引值，完成了较好的去重操作</li>
<li><p>步骤：</p>
<ul>
<li>索引<br>  ‘’’<br>  coll_values.create_index([(“md5_values”, pymongo.ASCENDING)], unique=True)<br>  ‘’’</li>
<li>聚合操作：对mongodb数据中数据进行一些统计工作</li>
<li>match</li>
<li>group</li>
<li>limit</li>
<li>sort</li>
<li><p>实例代码：</p>
<pre><code>&apos;&apos;&apos;
# 根据股票信息统计年份的数据数
query = [
{
    &quot;$match&quot;: {&quot;key&quot;: code, &quot;year&quot;: year, &quot;type&quot;: type}
},
{
    &quot;$group&quot;: {&quot;_id&quot;: {&quot;code&quot;: &quot;$key&quot;, &quot;year&quot;:&quot;$year&quot;}, &quot;total&quot;: {&quot;$sum&quot;:1}}
}

]
total = []
for code in [&quot;ACH&quot;, &quot;IKGH&quot;, &quot;ALN&quot;, &quot;AMCN&quot;, &quot;ATAI&quot;, &quot;AXN&quot;, &quot;ATV&quot;, &quot;BIDU&quot;, &quot;BITA&quot;, &quot;BORN&quot;, &quot;BSPM&quot;]:
    for one in [&quot;2011&quot;, &apos;2012&apos;, &apos;2013&apos;, &apos;2014&apos;, &quot;2015&quot;]:
    A = Count(code=code, year=one, type=&quot;Annual&quot;, factor=&quot;Income Statement&quot;)
    result = A.aggregation()
    total.append(list(result))
print(total)
&apos;&apos;&apos;
</code></pre></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、开篇&quot;&gt;&lt;a href=&quot;#一、开篇&quot; class=&quot;headerlink&quot; title=&quot;一、开篇&quot;&gt;&lt;/a&gt;一、开篇&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;邮件模块&lt;/li&gt;
&lt;li&gt;Excel处理模块&lt;/li&gt;
&lt;li&gt;日志模块&lt;/li&gt;
&lt;li&gt;PDF模块&lt;/li&gt;
&lt;li&gt;MD5处理&lt;/li&gt;
&lt;li&gt;mongodb索引和聚合&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Python" scheme="https://github.com/Alexyzc/categories/Python/"/>
    
    
      <category term="邮件处理" scheme="https://github.com/Alexyzc/tags/%E9%82%AE%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    
      <category term="日志模块" scheme="https://github.com/Alexyzc/tags/%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97/"/>
    
      <category term="pdf处理" scheme="https://github.com/Alexyzc/tags/pdf%E5%A4%84%E7%90%86/"/>
    
      <category term="md5处理" scheme="https://github.com/Alexyzc/tags/md5%E5%A4%84%E7%90%86/"/>
    
      <category term="mongodb索引和聚合" scheme="https://github.com/Alexyzc/tags/mongodb%E7%B4%A2%E5%BC%95%E5%92%8C%E8%81%9A%E5%90%88/"/>
    
      <category term="excel读写" scheme="https://github.com/Alexyzc/tags/excel%E8%AF%BB%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>Activity生命周期简述</title>
    <link href="https://github.com/Alexyzc/2017/03/07/Activity%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AE%80%E8%BF%B0/"/>
    <id>https://github.com/Alexyzc/2017/03/07/Activity生命周期简述/</id>
    <published>2017-03-07T09:42:00.454Z</published>
    <updated>2017-03-07T14:13:48.518Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、开篇"><a href="#一、开篇" class="headerlink" title="一、开篇"></a>一、开篇</h2><p>Android生命周期中，Acitivity保持长时间不变的状态,过渡状态(暂时状态)包括：onCreate()，onStart()操作后很快调用onResume()方法</p>
<ul>
<li>RESUME_ACTIVITY(运行状态)：Activity处于前台，且用户可以与其交互</li>
<li>PAUSE_ACTIVITY(暂停状态): Activity被在前台中处于半透明状态或者未覆盖全屏的其他Activity部分遮挡。 暂停的Activity不会接收用户输入，也无法执行任何代码</li>
<li><p>STOP_ACTIVITY(停止状态): Activity被完全隐藏，且对用户不可见；被视为后台Activity。 停止的Activity实例及其诸如成员变量等所有状态信息将保留，但它无法执行任何代码</p>
<a id="more"></a>
<p><img src="http://omfuwekil.bkt.clouddn.com/activity_lifecycle.jpg" alt="activity_lifecycle.jpg"><br>从上面的Activity生命周期图片可以看出来，其启动后执行的顺序：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">onCreate –&gt; onStart –&gt; onResume –&gt; onPause –&gt; onStop –&gt; onDestroy</div></pre></td></tr></table></figure>
<p>但是很多时候，Activity还有很多方法：onContentChanged， onPostCreate， onPostResume， onConfigurationChanged， onSaveInstanceState， onRestoreInstanceState</p>
</li>
</ul>
<h2 id="二、Activity生命周期"><a href="#二、Activity生命周期" class="headerlink" title="二、Activity生命周期"></a>二、Activity生命周期</h2><ul>
<li><p>进程之间的通信<br>对应App来说，其Activity的生命周期执行是与系统进程中的ActivityManager有一定关系，如：</p>
<ul>
<li>system_server进程（系统进程），framework框架的核心载体，里面运行了大量的系统服务，比如这里提供ApplicationThreadProxy（ATP），ActivityManagerService（AMS），这个两个服务都运行在system_server进程的不同线程中，由于ATP和AMS都是基于IBinder接口，都是binder线程，binder线程的创建与销毁都是由binder驱动来决定的。</li>
<li>App进程（应用程序所在进程），主线程主要负责Activity/Service等组件的生命周期以及UI相关操作都运行在这个线程； 另外，每个App进程中至少会有两个binder线程 ApplicationThread(AT)和ActivityManagerProxy（AMP），除了下图中所示的线程，其实还有很多线程，比如signal catcher线程等。<br><img src="http://omfuwekil.bkt.clouddn.com/app_process.jpg" alt="app_process"><blockquote>
<p>Binder用于不同进程之间通信，由一个进程的Binder客户端向另一个进程的服务端发送事件，比如图中线程2向线程4发送事务；而handler用于同一个进程中不同线程的通信，比如图中线程4向主线程发送消息.</p>
</blockquote>
</li>
</ul>
<p>结合上图Activity生命周期，比如暂停Activity流程如下：</p>
<ul>
<li>线程1的AMS中调用线程2的ATP来发送事件；（由于同一个进程的线程间资源共享，可以相互直接调用，但需要注意多线程并发问题）</li>
<li>线程2通过binder将暂停Activity的事件传输到App进程的线程4；</li>
<li>线程4通过handler消息机制，将暂停Activity的消息发送给主线程；</li>
<li>主线程在looper.loop()中循环遍历消息，当收到暂停Activity的消息(PAUSE_ACTIVITY)时，便将消息分发给ActivityThread.H.handleMessage()方法，再经过方法的层层调用，最后便会调用到Activity.onPause()方法。<blockquote>
<p>上述由AMS完成了onPause()控制，那么同理Activity的其他生命周期也是这么个流程来进行控制的。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>特定场景分析下Activity的生命周期</p>
<ul>
<li><p>首次启动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">onCreate –&gt; onStart –&gt; onResume</div></pre></td></tr></table></figure>
</li>
<li><p>按下返回键</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">onPause –&gt; onStop –&gt; onDestroy</div></pre></td></tr></table></figure>
</li>
<li><p>按Home键</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">onPause –&gt; onSaveInstanceState –&gt; onStop</div></pre></td></tr></table></figure>
</li>
<li><p>再次打开</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">onRestart –&gt; onStart –&gt; onResume</div></pre></td></tr></table></figure>
</li>
<li><p>屏幕旋转<br>不做任何配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//启动Activity会执行如下方法：</div><div class="line">onCreate –&gt; onStart –&gt; onResume</div><div class="line">//之后旋转屏幕，则Activity会被销毁并重新创建，之后便会执行如下方法</div><div class="line">onPause –&gt; onSaveInstanceState –&gt; onStop –&gt; onDestroy –&gt; onCreate –&gt; onStart –&gt; onRestoreInstanceState –&gt; onResume</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p>  在AndroidManifest配置文件里声明android:configChanges属性<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//默认屏幕旋转会重新创建，当然可以通过在配置文件里加上如下代码:</div><div class="line">android:configChanges=&quot;keyboardHidden|orientation|screenSize&quot;（sdk&gt;13时需加上screenSize）</div><div class="line">//这个时候再旋转屏幕便不会销毁Activity，这时候再旋转屏幕可以看到只会执行onConfigurationChanged方法，有什么在屏幕旋转的逻辑可以重写这个方法：</div><div class="line">public void onConfigurationChanged(Configuration newConfig) &#123;</div><div class="line">    if (newConfig.orientation == ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE) &#123;</div><div class="line">        // TODO:</div><div class="line">    &#125;</div><div class="line">    super.onConfigurationChanged(newConfig);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><p>FirstActivity打开SecondActivity</p>
<ul>
<li>FirstActivity打开SecondActivity，这时候FirstActivity生命周期的方法是这样的： onPause –&gt; onSaveInstanceState –&gt; onStop, 这个时候在SecondActivity按返回键，FirstActivity会有以下集中情况：<ul>
<li>正常情况下会执行： onRestart -&gt; onStart -&gt; onResume</li>
<li>当系统由于要回收内存而把 activity 销毁时</li>
</ul>
</li>
<li>Activity在onPause或者onStop状态下都有可能遇到由于突发事件系统需要回收内存，之后的onDestroy方法便不会再执行，这时候会执行： onCreate –&gt; onStart –&gt; onRestoreInstanceState –&gt; onResume</li>
</ul>
</li>
<li><p>实例代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"> public class ActivityDemo extends Activity&#123;</div><div class="line">private static final String TAG = &quot;ActivityDemo&quot;;</div><div class="line">private EditText mEditText;</div><div class="line">private String mString;//定义一个String类型用来存取我们的EditText输入值</div><div class="line"></div><div class="line">////当Activity第一次被创建时调用,我们可以在这进行初始化操作</div><div class="line">public void onCreate(Bundle saveInstanceState)&#123;</div><div class="line">	super.onCreate(saveInstanceState);</div><div class="line">	setContentView(R.layout.activity_main);</div><div class="line">	mEditText = (EditText)findViewById(R.id.editText);</div><div class="line">	Log.e(TAG,&quot;start onCreate...&quot;);</div><div class="line">&#125;</div><div class="line">//onStart()方法在Activity开始被执行时调用，它紧随onCreate()方法之后调用</div><div class="line">@Override</div><div class="line">protected void onStart()&#123;</div><div class="line">	super.onStart();</div><div class="line">	Log.e(TAG,&quot;start onStart...&quot;);</div><div class="line">&#125;</div><div class="line">//当按HOME键，在启动应用程勋，要恢复当前的状态</div><div class="line">//当Activity从stopped状态启动时会调用onRestart(),后面总是调用onStart()方法</div><div class="line">@Override</div><div class="line">protected void onRestart()&#123;</div><div class="line">	super.onRestart();</div><div class="line">	mEditText.setText(mString);</div><div class="line">	Log.e(TAG,&quot;start onRestart...&quot;);</div><div class="line">&#125;</div><div class="line">//onResume()方法在Activity即将与用户交互时调用</div><div class="line">@Override</div><div class="line">protected void onResume()&#123;</div><div class="line">	super.onResume();</div><div class="line">	Log.e(TAG,&quot;start onResume...&quot;);</div><div class="line">&#125;</div><div class="line">//按HOME键，在onPause，将输入的值赋给mString</div><div class="line">//在一个Activity启动另一个Activity时调用，它通常被用来持久化数据、停止动画或其他耗费资源的动作，</div><div class="line">//下一个Activity必须等待这个方法返回后在启动，所以在这里做过多的操作</div><div class="line">@Override</div><div class="line">protected void onPause()&#123;</div><div class="line">	super.onPause();</div><div class="line">	mString = mEditText.getText().toString();</div><div class="line">	Log.e(TAG,&quot;start onPause...&quot;);</div><div class="line">&#125;</div><div class="line">//onStop()方法在一个新的Activity启动、其他的Activity切换到前台、当天Activity被销毁时都会被调用</div><div class="line">@Override</div><div class="line">protected void onStop()&#123;</div><div class="line">	super.onStop();</div><div class="line">	Log.e(TAG,&quot;start onStop...&quot;);</div><div class="line">&#125;</div><div class="line">//Activitybe被销毁时调用</div><div class="line">@Override</div><div class="line">protected void onDestroy()&#123;</div><div class="line">	super.onDestroy();</div><div class="line">	Log.e(TAG,&quot;start onDestroy...&quot;);</div><div class="line">&#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、开篇&quot;&gt;&lt;a href=&quot;#一、开篇&quot; class=&quot;headerlink&quot; title=&quot;一、开篇&quot;&gt;&lt;/a&gt;一、开篇&lt;/h2&gt;&lt;p&gt;Android生命周期中，Acitivity保持长时间不变的状态,过渡状态(暂时状态)包括：onCreate()，onStart()操作后很快调用onResume()方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RESUME_ACTIVITY(运行状态)：Activity处于前台，且用户可以与其交互&lt;/li&gt;
&lt;li&gt;PAUSE_ACTIVITY(暂停状态): Activity被在前台中处于半透明状态或者未覆盖全屏的其他Activity部分遮挡。 暂停的Activity不会接收用户输入，也无法执行任何代码&lt;/li&gt;
&lt;li&gt;&lt;p&gt;STOP_ACTIVITY(停止状态): Activity被完全隐藏，且对用户不可见；被视为后台Activity。 停止的Activity实例及其诸如成员变量等所有状态信息将保留，但它无法执行任何代码&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://github.com/Alexyzc/categories/Android/"/>
    
    
      <category term="startActivity" scheme="https://github.com/Alexyzc/tags/startActivity/"/>
    
      <category term="RESUME_ACTIVITY" scheme="https://github.com/Alexyzc/tags/RESUME-ACTIVITY/"/>
    
      <category term="PAUSE_ACTIVITY" scheme="https://github.com/Alexyzc/tags/PAUSE-ACTIVITY/"/>
    
      <category term="STOP_ACTIVITY" scheme="https://github.com/Alexyzc/tags/STOP-ACTIVITY/"/>
    
      <category term="DESTROY_ACTIVITY" scheme="https://github.com/Alexyzc/tags/DESTROY-ACTIVITY/"/>
    
  </entry>
  
  <entry>
    <title>Java之封装思想</title>
    <link href="https://github.com/Alexyzc/2017/03/06/Java%E4%B9%8B%E5%B0%81%E8%A3%85%E6%80%9D%E6%83%B3/"/>
    <id>https://github.com/Alexyzc/2017/03/06/Java之封装思想/</id>
    <published>2017-03-06T08:56:16.994Z</published>
    <updated>2017-03-06T10:05:52.170Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Java" scheme="https://github.com/Alexyzc/categories/Java/"/>
    
    
      <category term="JAVA" scheme="https://github.com/Alexyzc/tags/JAVA/"/>
    
      <category term="封装思想" scheme="https://github.com/Alexyzc/tags/%E5%B0%81%E8%A3%85%E6%80%9D%E6%83%B3/"/>
    
      <category term="继承思想" scheme="https://github.com/Alexyzc/tags/%E7%BB%A7%E6%89%BF%E6%80%9D%E6%83%B3/"/>
    
      <category term="多态思想" scheme="https://github.com/Alexyzc/tags/%E5%A4%9A%E6%80%81%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Android系统架构简述</title>
    <link href="https://github.com/Alexyzc/2017/02/24/Android%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"/>
    <id>https://github.com/Alexyzc/2017/02/24/Android系统架构/</id>
    <published>2017-02-24T07:55:53.713Z</published>
    <updated>2017-02-24T09:35:58.111Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、开篇"><a href="#一、开篇" class="headerlink" title="一、开篇"></a>一、开篇</h2><p>Android系统其底层基于Linux操作系统为基础，上层采用Java和Native层。它们是通过系统调用Syscall连通系统的内核空间和用户空间。</p>
<h2 id="二、Android架构"><a href="#二、Android架构" class="headerlink" title="二、Android架构"></a>二、Android架构</h2><h4 id="系统启动流程"><a href="#系统启动流程" class="headerlink" title="系统启动流程"></a>系统启动流程</h4><blockquote>
<p>Andorid系统启动过程：Loader—&gt;Kernel—&gt;Native—&gt;Native—&gt;Framework—&gt;App</p>
</blockquote>
<a id="more"></a>
<h5 id="Loader层？"><a href="#Loader层？" class="headerlink" title="Loader层？"></a>Loader层？</h5><ul>
<li>Boot Rom:当手机处于关机状态时，长按Power键开机，引导芯片开始从固化在ROM里的预设出代码开始执行，然后加载引导程序到RAM；</li>
<li>Boot Loader：这是启动Android系统之前的引导程序，主要是检查RAM，初始化硬件参数等功能。</li>
</ul>
<h5 id="Kernel层"><a href="#Kernel层" class="headerlink" title="Kernel层?"></a>Kernel层?</h5><ul>
<li>启动Kernel的swapper进程(pid=0)：该进程又称为idle进程, 系统初始化过程Kernel由无到有开创的第一个进程, 用于初始化进程管理、内存管理，加载Display,Camera Driver，Binder Driver等相关工作；</li>
<li>启动kthreadd进程（pid=2）：是Linux系统的内核进程，会创建内核工作线程kworkder，软中断线程ksoftirqd，thermal等内核守护进程。kthreadd进程是所有内核进程的鼻祖。</li>
</ul>
<h5 id="Native层"><a href="#Native层" class="headerlink" title="Native层"></a>Native层</h5><ul>
<li>init进程会孵化出ueventd、logd、healthd、installd、adbd、lmkd等用户守护进程；</li>
<li>init进程还启动servicemanager(binder服务管家)、bootanim(开机动画)等重要服务</li>
<li>init进程孵化出Zygote进程，Zygote进程是Android系统的第一个Java进程，Zygote是所有Java进程的父进程，Zygote进程本身是由init进程孵化而来的。<blockquote>
<p>Native层主要包括init孵化来的用户空间的守护进程、HAL层以及开机动画等。启动init进程(pid=1),是Linux系统的用户进程，init进程是所有用户进程的鼻祖</p>
</blockquote>
</li>
</ul>
<h6 id="Framework层"><a href="#Framework层" class="headerlink" title="Framework层"></a>Framework层</h6><ul>
<li><p>Zygote进程，是由init进程通过解析init.rc文件后fork生成的，Zygote进程主要包含</p>
<ul>
<li>加载ZygoteInit类，注册Zygote Socket服务端套接字；</li>
<li>加载虚拟机；</li>
<li>preloadClasses；</li>
<li>preloadResouces;</li>
</ul>
</li>
<li>System Server进程，是由Zygote进程fork而来，System Server是Zygote孵化的第一个进程，System Server负责启动和管理整个Java framework，包含ActivityManager，PowerManager等服务。</li>
<li>Media Server进程，是由init进程fork而来，负责启动和管理整个C++ framework，包含AudioFlinger，Camera Service，等服务。</li>
</ul>
<h5 id="App层？"><a href="#App层？" class="headerlink" title="App层？"></a>App层？</h5><ul>
<li>Zygote进程孵化出的第一个App进程是Launcher，这是用户看到的桌面App；</li>
<li>Zygote进程还会创建Browser，Phone，Email等App进程，每个App至少运行在一个进程上</li>
<li>所有的App进程都是由Zygote进程fork生成的</li>
</ul>
<h5 id="Syscall-amp-amp-JNI"><a href="#Syscall-amp-amp-JNI" class="headerlink" title="Syscall &amp;&amp; JNI?"></a>Syscall &amp;&amp; JNI?</h5><ul>
<li>Native与Kernel之间有一层系统调用(SysCall)层</li>
<li>Java层与Native(C/C++)层之间的纽带JNI</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、开篇&quot;&gt;&lt;a href=&quot;#一、开篇&quot; class=&quot;headerlink&quot; title=&quot;一、开篇&quot;&gt;&lt;/a&gt;一、开篇&lt;/h2&gt;&lt;p&gt;Android系统其底层基于Linux操作系统为基础，上层采用Java和Native层。它们是通过系统调用Syscall连通系统的内核空间和用户空间。&lt;/p&gt;
&lt;h2 id=&quot;二、Android架构&quot;&gt;&lt;a href=&quot;#二、Android架构&quot; class=&quot;headerlink&quot; title=&quot;二、Android架构&quot;&gt;&lt;/a&gt;二、Android架构&lt;/h2&gt;&lt;h4 id=&quot;系统启动流程&quot;&gt;&lt;a href=&quot;#系统启动流程&quot; class=&quot;headerlink&quot; title=&quot;系统启动流程&quot;&gt;&lt;/a&gt;系统启动流程&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Andorid系统启动过程：Loader—&amp;gt;Kernel—&amp;gt;Native—&amp;gt;Native—&amp;gt;Framework—&amp;gt;App&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="https://github.com/Alexyzc/categories/Android/"/>
    
    
      <category term="Android" scheme="https://github.com/Alexyzc/tags/Android/"/>
    
      <category term="Loader层" scheme="https://github.com/Alexyzc/tags/Loader%E5%B1%82/"/>
    
      <category term="Kernel层" scheme="https://github.com/Alexyzc/tags/Kernel%E5%B1%82/"/>
    
      <category term="Native层" scheme="https://github.com/Alexyzc/tags/Native%E5%B1%82/"/>
    
      <category term="FrameWork层" scheme="https://github.com/Alexyzc/tags/FrameWork%E5%B1%82/"/>
    
      <category term="App层" scheme="https://github.com/Alexyzc/tags/App%E5%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://github.com/Alexyzc/2017/02/22/hello-world/"/>
    <id>https://github.com/Alexyzc/2017/02/22/hello-world/</id>
    <published>2017-02-22T10:15:07.479Z</published>
    <updated>2017-02-24T07:03:23.071Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="testBlog" scheme="https://github.com/Alexyzc/categories/testBlog/"/>
    
    
      <category term="https" scheme="https://github.com/Alexyzc/tags/https/"/>
    
      <category term="Hello" scheme="https://github.com/Alexyzc/tags/Hello/"/>
    
      <category term="github" scheme="https://github.com/Alexyzc/tags/github/"/>
    
  </entry>
  
</feed>
