<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风轻云淡</title>
  <subtitle>Goals determine what you are going to be</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/Alexyzc/"/>
  <updated>2017-03-07T14:11:39.186Z</updated>
  <id>https://github.com/Alexyzc/</id>
  
  <author>
    <name>风轻云淡</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Activity生命周期简述</title>
    <link href="https://github.com/Alexyzc/2017/03/07/Activity%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AE%80%E8%BF%B0/"/>
    <id>https://github.com/Alexyzc/2017/03/07/Activity生命周期简述/</id>
    <published>2017-03-07T09:42:00.454Z</published>
    <updated>2017-03-07T14:11:39.186Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、开篇"><a href="#一、开篇" class="headerlink" title="一、开篇"></a>一、开篇</h2><p>Android生命周期中，Acitivity保持长时间不变的状态,过渡状态(暂时状态)包括：onCreate()，onStart()操作后很快调用onResume()方法</p>
<ul>
<li>RESUME_ACTIVITY(运行状态)：Activity处于前台，且用户可以与其交互</li>
<li>PAUSE_ACTIVITY(暂停状态): Activity被在前台中处于半透明状态或者未覆盖全屏的其他Activity部分遮挡。 暂停的Activity不会接收用户输入，也无法执行任何代码</li>
<li><p>STOP_ACTIVITY(停止状态): Activity被完全隐藏，且对用户不可见；被视为后台Activity。 停止的Activity实例及其诸如成员变量等所有状态信息将保留，但它无法执行任何代码</p>
<a id="more"></a>
<p><img src="http://omfuwekil.bkt.clouddn.com/activity_lifecycle.jpg" alt="activity_lifecycle.jpg"><br>从上面的Activity生命周期图片可以看出来，其启动后执行的顺序：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">onCreate –&gt; onStart –&gt; onResume –&gt; onPause –&gt; onStop –&gt; onDestroy</div></pre></td></tr></table></figure>
<p>但是很多时候，Activity还有很多方法：onContentChanged， onPostCreate， onPostResume， onConfigurationChanged， onSaveInstanceState， onRestoreInstanceState</p>
</li>
</ul>
<h2 id="二、Activity生命周期"><a href="#二、Activity生命周期" class="headerlink" title="二、Activity生命周期"></a>二、Activity生命周期</h2><ul>
<li><p>进程之间的通信<br>对应App来说，其Activity的生命周期执行是与系统进程中的ActivityManager有一定关系，如：</p>
<ul>
<li>system_server进程（系统进程），framework框架的核心载体，里面运行了大量的系统服务，比如这里提供ApplicationThreadProxy（ATP），ActivityManagerService（AMS），这个两个服务都运行在system_server进程的不同线程中，由于ATP和AMS都是基于IBinder接口，都是binder线程，binder线程的创建与销毁都是由binder驱动来决定的。</li>
<li>App进程（应用程序所在进程），主线程主要负责Activity/Service等组件的生命周期以及UI相关操作都运行在这个线程； 另外，每个App进程中至少会有两个binder线程 ApplicationThread(AT)和ActivityManagerProxy（AMP），除了下图中所示的线程，其实还有很多线程，比如signal catcher线程等。<br><img src="http://omfuwekil.bkt.clouddn.com/app_process.jpg" alt="app_process"><blockquote>
<p>Binder用于不同进程之间通信，由一个进程的Binder客户端向另一个进程的服务端发送事件，比如图中线程2向线程4发送事务；而handler用于同一个进程中不同线程的通信，比如图中线程4向主线程发送消息.</p>
</blockquote>
</li>
</ul>
<p>结合上图Activity生命周期，比如暂停Activity流程如下：</p>
<ul>
<li>线程1的AMS中调用线程2的ATP来发送事件；（由于同一个进程的线程间资源共享，可以相互直接调用，但需要注意多线程并发问题）</li>
<li>线程2通过binder将暂停Activity的事件传输到App进程的线程4；</li>
<li>线程4通过handler消息机制，将暂停Activity的消息发送给主线程；</li>
<li>主线程在looper.loop()中循环遍历消息，当收到暂停Activity的消息(PAUSE_ACTIVITY)时，便将消息分发给ActivityThread.H.handleMessage()方法，再经过方法的层层调用，最后便会调用到Activity.onPause()方法。<blockquote>
<p>上述由AMS完成了onPause()控制，那么同理Activity的其他生命周期也是这么个流程来进行控制的。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>特定场景分析下Activity的生命周期</p>
<ul>
<li><p>首次启动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">onCreate –&gt; onStart –&gt; onResume</div></pre></td></tr></table></figure>
</li>
<li><p>按下返回键</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">onPause –&gt; onStop –&gt; onDestroy</div></pre></td></tr></table></figure>
</li>
<li><p>按Home键</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">onPause –&gt; onSaveInstanceState –&gt; onStop</div></pre></td></tr></table></figure>
</li>
<li><p>再次打开</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">onRestart –&gt; onStart –&gt; onResume</div></pre></td></tr></table></figure>
</li>
<li><p>屏幕旋转<br>不做任何配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//启动Activity会执行如下方法：</div><div class="line">onCreate –&gt; onStart –&gt; onResume</div><div class="line">//之后旋转屏幕，则Activity会被销毁并重新创建，之后便会执行如下方法</div><div class="line">onPause –&gt; onSaveInstanceState –&gt; onStop –&gt; onDestroy –&gt; onCreate –&gt; onStart –&gt; onRestoreInstanceState –&gt; onResume</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p>  在AndroidManifest配置文件里声明android:configChanges属性<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//默认屏幕旋转会重新创建，当然可以通过在配置文件里加上如下代码:</div><div class="line">android:configChanges=&quot;keyboardHidden|orientation|screenSize&quot;（sdk&gt;13时需加上screenSize）</div><div class="line">//这个时候再旋转屏幕便不会销毁Activity，这时候再旋转屏幕可以看到只会执行onConfigurationChanged方法，有什么在屏幕旋转的逻辑可以重写这个方法：</div><div class="line">public void onConfigurationChanged(Configuration newConfig) &#123;</div><div class="line">    if (newConfig.orientation == ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE) &#123;</div><div class="line">        // TODO:</div><div class="line">    &#125;</div><div class="line">    super.onConfigurationChanged(newConfig);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><p>FirstActivity打开SecondActivity</p>
<ul>
<li>FirstActivity打开SecondActivity，这时候FirstActivity生命周期的方法是这样的： onPause –&gt; onSaveInstanceState –&gt; onStop, 这个时候在SecondActivity按返回键，FirstActivity会有以下集中情况：<ul>
<li>正常情况下会执行： onRestart -&gt; onStart -&gt; onResume</li>
<li>当系统由于要回收内存而把 activity 销毁时</li>
</ul>
</li>
<li>Activity在onPause或者onStop状态下都有可能遇到由于突发事件系统需要回收内存，之后的onDestroy方法便不会再执行，这时候会执行： onCreate –&gt; onStart –&gt; onRestoreInstanceState –&gt; onResume</li>
</ul>
</li>
<li><p>实例代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"> public class ActivityDemo extends Activity&#123;</div><div class="line">private static final String TAG = &quot;ActivityDemo&quot;;</div><div class="line">private EditText mEditText;</div><div class="line">private String mString;//定义一个String类型用来存取我们的EditText输入值</div><div class="line"></div><div class="line">////当Activity第一次被创建时调用,我们可以在这进行初始化操作</div><div class="line">public void onCreate(Bundle saveInstanceState)&#123;</div><div class="line">	super.onCreate(saveInstanceState);</div><div class="line">	setContentView(R.layout.activity_main);</div><div class="line">	mEditText = (EditText)findViewById(R.id.editText);</div><div class="line">	Log.e(TAG,&quot;start onCreate...&quot;);</div><div class="line">&#125;</div><div class="line">//onStart()方法在Activity开始被执行时调用，它紧随onCreate()方法之后调用</div><div class="line">@Override</div><div class="line">protected void onStart()&#123;</div><div class="line">	super.onStart();</div><div class="line">	Log.e(TAG,&quot;start onStart...&quot;);</div><div class="line">&#125;</div><div class="line">//当按HOME键，在启动应用程勋，要恢复当前的状态</div><div class="line">//当Activity从stopped状态启动时会调用onRestart(),后面总是调用onStart()方法</div><div class="line">@Override</div><div class="line">protected void onRestart()&#123;</div><div class="line">	super.onRestart();</div><div class="line">	mEditText.setText(mString);</div><div class="line">	Log.e(TAG,&quot;start onRestart...&quot;);</div><div class="line">&#125;</div><div class="line">//onResume()方法在Activity即将与用户交互时调用</div><div class="line">@Override</div><div class="line">protected void onResume()&#123;</div><div class="line">	super.onResume();</div><div class="line">	Log.e(TAG,&quot;start onResume...&quot;);</div><div class="line">&#125;</div><div class="line">//按HOME键，在onPause，将输入的值赋给mString</div><div class="line">//在一个Activity启动另一个Activity时调用，它通常被用来持久化数据、停止动画或其他耗费资源的动作，</div><div class="line">//下一个Activity必须等待这个方法返回后在启动，所以在这里做过多的操作</div><div class="line">@Override</div><div class="line">protected void onPause()&#123;</div><div class="line">	super.onPause();</div><div class="line">	mString = mEditText.getText().toString();</div><div class="line">	Log.e(TAG,&quot;start onPause...&quot;);</div><div class="line">&#125;</div><div class="line">//onStop()方法在一个新的Activity启动、其他的Activity切换到前台、当天Activity被销毁时都会被调用</div><div class="line">@Override</div><div class="line">protected void onStop()&#123;</div><div class="line">	super.onStop();</div><div class="line">	Log.e(TAG,&quot;start onStop...&quot;);</div><div class="line">&#125;</div><div class="line">//Activitybe被销毁时调用</div><div class="line">@Override</div><div class="line">protected void onDestroy()&#123;</div><div class="line">	super.onDestroy();</div><div class="line">	Log.e(TAG,&quot;start onDestroy...&quot;);</div><div class="line">&#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、开篇&quot;&gt;&lt;a href=&quot;#一、开篇&quot; class=&quot;headerlink&quot; title=&quot;一、开篇&quot;&gt;&lt;/a&gt;一、开篇&lt;/h2&gt;&lt;p&gt;Android生命周期中，Acitivity保持长时间不变的状态,过渡状态(暂时状态)包括：onCreate()，onStart()操作后很快调用onResume()方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RESUME_ACTIVITY(运行状态)：Activity处于前台，且用户可以与其交互&lt;/li&gt;
&lt;li&gt;PAUSE_ACTIVITY(暂停状态): Activity被在前台中处于半透明状态或者未覆盖全屏的其他Activity部分遮挡。 暂停的Activity不会接收用户输入，也无法执行任何代码&lt;/li&gt;
&lt;li&gt;&lt;p&gt;STOP_ACTIVITY(停止状态): Activity被完全隐藏，且对用户不可见；被视为后台Activity。 停止的Activity实例及其诸如成员变量等所有状态信息将保留，但它无法执行任何代码&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://github.com/Alexyzc/categories/Android/"/>
    
    
      <category term="startActivity" scheme="https://github.com/Alexyzc/tags/startActivity/"/>
    
      <category term="RESUME_ACTIVITY" scheme="https://github.com/Alexyzc/tags/RESUME-ACTIVITY/"/>
    
      <category term="PAUSE_ACTIVITY" scheme="https://github.com/Alexyzc/tags/PAUSE-ACTIVITY/"/>
    
      <category term="STOP_ACTIVITY" scheme="https://github.com/Alexyzc/tags/STOP-ACTIVITY/"/>
    
      <category term="DESTROY_ACTIVITY" scheme="https://github.com/Alexyzc/tags/DESTROY-ACTIVITY/"/>
    
  </entry>
  
  <entry>
    <title>Java之封装思想</title>
    <link href="https://github.com/Alexyzc/2017/03/06/Java%E4%B9%8B%E5%B0%81%E8%A3%85%E6%80%9D%E6%83%B3/"/>
    <id>https://github.com/Alexyzc/2017/03/06/Java之封装思想/</id>
    <published>2017-03-06T08:56:16.994Z</published>
    <updated>2017-03-06T10:05:52.170Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Java" scheme="https://github.com/Alexyzc/categories/Java/"/>
    
    
      <category term="JAVA" scheme="https://github.com/Alexyzc/tags/JAVA/"/>
    
      <category term="封装思想" scheme="https://github.com/Alexyzc/tags/%E5%B0%81%E8%A3%85%E6%80%9D%E6%83%B3/"/>
    
      <category term="继承思想" scheme="https://github.com/Alexyzc/tags/%E7%BB%A7%E6%89%BF%E6%80%9D%E6%83%B3/"/>
    
      <category term="多态思想" scheme="https://github.com/Alexyzc/tags/%E5%A4%9A%E6%80%81%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Android系统架构简述</title>
    <link href="https://github.com/Alexyzc/2017/02/24/Android%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"/>
    <id>https://github.com/Alexyzc/2017/02/24/Android系统架构/</id>
    <published>2017-02-24T07:55:53.713Z</published>
    <updated>2017-02-24T09:35:58.111Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、开篇"><a href="#一、开篇" class="headerlink" title="一、开篇"></a>一、开篇</h2><p>Android系统其底层基于Linux操作系统为基础，上层采用Java和Native层。它们是通过系统调用Syscall连通系统的内核空间和用户空间。</p>
<h2 id="二、Android架构"><a href="#二、Android架构" class="headerlink" title="二、Android架构"></a>二、Android架构</h2><h4 id="系统启动流程"><a href="#系统启动流程" class="headerlink" title="系统启动流程"></a>系统启动流程</h4><blockquote>
<p>Andorid系统启动过程：Loader—&gt;Kernel—&gt;Native—&gt;Native—&gt;Framework—&gt;App</p>
</blockquote>
<a id="more"></a>
<h5 id="Loader层？"><a href="#Loader层？" class="headerlink" title="Loader层？"></a>Loader层？</h5><ul>
<li>Boot Rom:当手机处于关机状态时，长按Power键开机，引导芯片开始从固化在ROM里的预设出代码开始执行，然后加载引导程序到RAM；</li>
<li>Boot Loader：这是启动Android系统之前的引导程序，主要是检查RAM，初始化硬件参数等功能。</li>
</ul>
<h5 id="Kernel层"><a href="#Kernel层" class="headerlink" title="Kernel层?"></a>Kernel层?</h5><ul>
<li>启动Kernel的swapper进程(pid=0)：该进程又称为idle进程, 系统初始化过程Kernel由无到有开创的第一个进程, 用于初始化进程管理、内存管理，加载Display,Camera Driver，Binder Driver等相关工作；</li>
<li>启动kthreadd进程（pid=2）：是Linux系统的内核进程，会创建内核工作线程kworkder，软中断线程ksoftirqd，thermal等内核守护进程。kthreadd进程是所有内核进程的鼻祖。</li>
</ul>
<h5 id="Native层"><a href="#Native层" class="headerlink" title="Native层"></a>Native层</h5><ul>
<li>init进程会孵化出ueventd、logd、healthd、installd、adbd、lmkd等用户守护进程；</li>
<li>init进程还启动servicemanager(binder服务管家)、bootanim(开机动画)等重要服务</li>
<li>init进程孵化出Zygote进程，Zygote进程是Android系统的第一个Java进程，Zygote是所有Java进程的父进程，Zygote进程本身是由init进程孵化而来的。<blockquote>
<p>Native层主要包括init孵化来的用户空间的守护进程、HAL层以及开机动画等。启动init进程(pid=1),是Linux系统的用户进程，init进程是所有用户进程的鼻祖</p>
</blockquote>
</li>
</ul>
<h6 id="Framework层"><a href="#Framework层" class="headerlink" title="Framework层"></a>Framework层</h6><ul>
<li><p>Zygote进程，是由init进程通过解析init.rc文件后fork生成的，Zygote进程主要包含</p>
<ul>
<li>加载ZygoteInit类，注册Zygote Socket服务端套接字；</li>
<li>加载虚拟机；</li>
<li>preloadClasses；</li>
<li>preloadResouces;</li>
</ul>
</li>
<li>System Server进程，是由Zygote进程fork而来，System Server是Zygote孵化的第一个进程，System Server负责启动和管理整个Java framework，包含ActivityManager，PowerManager等服务。</li>
<li>Media Server进程，是由init进程fork而来，负责启动和管理整个C++ framework，包含AudioFlinger，Camera Service，等服务。</li>
</ul>
<h5 id="App层？"><a href="#App层？" class="headerlink" title="App层？"></a>App层？</h5><ul>
<li>Zygote进程孵化出的第一个App进程是Launcher，这是用户看到的桌面App；</li>
<li>Zygote进程还会创建Browser，Phone，Email等App进程，每个App至少运行在一个进程上</li>
<li>所有的App进程都是由Zygote进程fork生成的</li>
</ul>
<h5 id="Syscall-amp-amp-JNI"><a href="#Syscall-amp-amp-JNI" class="headerlink" title="Syscall &amp;&amp; JNI?"></a>Syscall &amp;&amp; JNI?</h5><ul>
<li>Native与Kernel之间有一层系统调用(SysCall)层</li>
<li>Java层与Native(C/C++)层之间的纽带JNI</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、开篇&quot;&gt;&lt;a href=&quot;#一、开篇&quot; class=&quot;headerlink&quot; title=&quot;一、开篇&quot;&gt;&lt;/a&gt;一、开篇&lt;/h2&gt;&lt;p&gt;Android系统其底层基于Linux操作系统为基础，上层采用Java和Native层。它们是通过系统调用Syscall连通系统的内核空间和用户空间。&lt;/p&gt;
&lt;h2 id=&quot;二、Android架构&quot;&gt;&lt;a href=&quot;#二、Android架构&quot; class=&quot;headerlink&quot; title=&quot;二、Android架构&quot;&gt;&lt;/a&gt;二、Android架构&lt;/h2&gt;&lt;h4 id=&quot;系统启动流程&quot;&gt;&lt;a href=&quot;#系统启动流程&quot; class=&quot;headerlink&quot; title=&quot;系统启动流程&quot;&gt;&lt;/a&gt;系统启动流程&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Andorid系统启动过程：Loader—&amp;gt;Kernel—&amp;gt;Native—&amp;gt;Native—&amp;gt;Framework—&amp;gt;App&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="https://github.com/Alexyzc/categories/Android/"/>
    
    
      <category term="Android" scheme="https://github.com/Alexyzc/tags/Android/"/>
    
      <category term="Loader层" scheme="https://github.com/Alexyzc/tags/Loader%E5%B1%82/"/>
    
      <category term="Kernel层" scheme="https://github.com/Alexyzc/tags/Kernel%E5%B1%82/"/>
    
      <category term="Native层" scheme="https://github.com/Alexyzc/tags/Native%E5%B1%82/"/>
    
      <category term="FrameWork层" scheme="https://github.com/Alexyzc/tags/FrameWork%E5%B1%82/"/>
    
      <category term="App层" scheme="https://github.com/Alexyzc/tags/App%E5%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://github.com/Alexyzc/2017/02/22/hello-world/"/>
    <id>https://github.com/Alexyzc/2017/02/22/hello-world/</id>
    <published>2017-02-22T10:15:07.479Z</published>
    <updated>2017-02-24T07:03:23.071Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="testBlog" scheme="https://github.com/Alexyzc/categories/testBlog/"/>
    
    
      <category term="https" scheme="https://github.com/Alexyzc/tags/https/"/>
    
      <category term="Hello" scheme="https://github.com/Alexyzc/tags/Hello/"/>
    
      <category term="github" scheme="https://github.com/Alexyzc/tags/github/"/>
    
  </entry>
  
</feed>
